<?php

/**
 * @file
 * Main Key Drupal project file.
 *
 * This file holds the main Drupal hook functions,
 * and API functions.
 *
 * @ingroup key
 */

/**
 * @defgroup key Key: Provides an API for key providers.
 *
 * Provides an API for defining and using key providers.
 */

/**
 * Implements hook_menu().
 * @TODO: This is just for testing, remove when committing.
 */
function key_menu() {
  $items = array();

  $items['key/list'] = array(
    'title' => 'List of keys',
    'description' => 'List keys.',
    'page callback' => 'key_list',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['key/get/%'] = array(
    'title' => 'Get key',
    'description' => 'Get keys.',
    'page callback' => 'key_get',
    'page arguments' => array(2),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

function key_list() {
  $keys = key_get_key_providers(TRUE, TRUE);
  $key_list = array();
  foreach ($keys as $key_name => $key_value) {
    $key_list[$key_name] = $key_value['title'];
  }

  dpm($key_list);

  return $key_list;
}

function key_get($keyname) {
  $key_provider = key_get_key_provider($keyname);
//  $key =drupal_get_private_key();
  $key = key_get_key_from_key_provider($key_provider);

  return $key;
}

/**
 * Implements hook_ctools_plugin_directory().
 *
 * Tell ctools where to find plugins for this module.
 */
function key_ctools_plugin_directory($module, $plugin) {
  if ($module == 'key' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_ctools_plugin_type().
 *
 * Tell ctools about our plugin types.
 */
function key_ctools_plugin_type() {
  $plugins = array();

  $plugins['key_providers'] = array(
    'cache' => TRUE,
    'cache table' => 'cache',
    'process' => '_key_plugin_process',
    'defaults' => array(
      'title' => '',
      'description' => '',
      'key callback' => NULL,
      'dependency callback' => NULL,
      'dependency errors' => NULL,
      'settings form' => NULL,
    ),
  );

  return $plugins;
}

/**
 * Implements hook_element_info().
 */
function key_element_info() {
  $elements['key'] = array(
    '#default_value' => '',
    '#input' => TRUE,
    '#process' => array('key_element_process'),
    '#value_callback' => 'key_element_value',
    '#element_validate' => array(),
    '#theme' => array(''),
    '#theme_wrappers' => array('form_element'),
    '#title_display' => 'invisible',
    '#tree' => TRUE,
  );

  return $elements;
}

/**
 * Process callback function for key element.
 */
function key_element_process($element, $form_state, $complete_form) {
  $providers = key_get_key_providers();
  $provider_options = array();
  $field_name = $element['#name'];
  $wrapper_id = str_replace('_', '-', $field_name) . '-wrapper';

  if (!empty($providers)) {
    foreach($providers as $name => $provider) {
      $provider_options[$name] = $provider['title'];
    }
  }

  $element['key_field'] = array(
    '#type' => 'container',
    '#tree' => TRUE,
    '#prefix' => '<div id="' . $wrapper_id . '">',
    '#suffix' => '</div>',
  );

  $element['key_field']['key'] = array(
    '#type' => 'textfield',
    '#size' => 50,
    '#required' => $element['#required'],
    '#title' => $element['#title'],
    '#theme_wrappers' => array('form_element'),
  );

  if (isset($element['#default_value']['key_field']['key'])) {
    $element['key_field']['key']['#default_value'] = $element['#default_value']['key_field']['key'];
  }

  $element['key_field']['provider'] = array(
    '#type' => 'select',
    '#options' => $provider_options,
    '#required' => $element['#required'],
    '#title' => t('Key provider'),
    '#theme_wrappers' => array('form_element'),
    '#ajax' => array(
      'method' => 'replace',
      'callback' => 'key_provider_additional_settings_ajax',
      'wrapper' => $wrapper_id,
    ),
  );

  if (isset($element['#default_value']['key_field']['provider'])) {
    $element['key_field']['provider']['#default_value'] = $element['#default_value']['key_field']['provider'];
  }
  elseif (array_key_exists('drupal_variable', $provider_options)) {
    $element['key_field']['provider']['#default_value'] = 'drupal_variable';
  }

  if (isset($element['#value']['key_field']['provider'])) {
    $provider = $element['#value']['key_field']['provider'];
  }
  else {
    $provider = NULL;
  }

  if ($provider) {
    if ($provider_settings_form = ctools_plugin_get_function($providers[$provider], 'settings form')) {
      $element['key_field']['provider_settings'] = array(
        '#type' => 'fieldset',
        '#title' => t('Additional Key Provider Settings'),
        '#tree' => TRUE,
      );

      $element['key_field']['provider_settings'] += call_user_func($provider_settings_form);
    }
  }

  return $element;
}

/**
 * Callback for AJAX form re-rendering.
 */
function key_provider_additional_settings_ajax($form, $form_state) {
  $parents = $form_state['triggering_element']['#array_parents'];
  array_pop($parents);
  $wrapper = drupal_array_get_nested_value($form, $parents);

  return $wrapper;
}

/**
 * Value callback for key element.
 */
function key_element_value($element, $input = FALSE, &$form_state) {

}

/**
 * Validate callback for key element.
 */
function key_element_validate($element, &$form_state) {
}

/**
 * Fetch metadata on a specific key provider plugin.
 *
 * @param mixed $provider
 *   Name of a key provider method. If no $provider is specified, this
 *   function will return info about the default key provider.
 *
 * @return array
 *   An array with information about the requested key provider.
 */
function key_get_key_provider($provider = NULL) {
  if (empty($provider)) {
    watchdog('Key', 'Provider was not provided.', $provider);
    return FALSE;
  }

  ctools_include('plugins');
  $return = ctools_get_plugins('key', 'key_providers', $provider);
  watchdog('Key', 'key', $return);

  return $return;
}

/**
 * Returns info for all encryption key providers.
 *
 * @param boolean $all
 *   A flag indicating whether to include plugins with unmet dependencies.
 *
 * @param boolean $reset
 *   A flag indicating whether to clear the plugin cache. Otherwise, this
 *   function may return stale data if plugin properties have changed.
 *
 * @return array
 *   An array of arrays with information about all available key providers.
 */
function key_get_key_providers($all = TRUE, $reset = FALSE) {
  if ($reset) {
    _key_clear_plugin_cache('key_providers');
  }

  ctools_include('plugins');
  $providers = ctools_get_plugins('key', 'key_providers');
  watchdog('Key', 'providers list', $providers);

  return $all ? $providers : array_filter($providers, '_key_plugin_is_valid');
}

/**
 * Get the key from a key provider.
 *
 * @param mixed $provider
 *   The key provider to retrieve the key for. Can be either the fully-loaded
 *   provider (from encrypt_get_key_provider() or the name of the provider. If
 *   NULL, it assumes the default key provider.
 *
 * @return string
 *   The key.
 */
function key_get_key_from_key_provider($provider = NULL, $provider_settings = array()) {
  if (!is_array($provider)) {
    $provider = encrypt_get_key_provider($provider);
  }
  $key_function = ctools_plugin_get_function($provider, 'key callback');
  $key = call_user_func($key_function, $provider_settings);

  return $key;
}

/**
 * Additional processing for plugins.
 */
function _key_plugin_process(&$plugin, $info) {
  // Calculate dependencies and attach any errors.
  if ($plugin['dependency callback'] && $dep_function = ctools_plugin_get_function($plugin, 'dependency callback')) {
    $plugin['dependency errors'] = call_user_func($dep_function);
  }
}

/**
 * Helper function to determine if a plugin has unmet dependencies. Most
 * helpful in conjunction with array_filter().
 *
 * @param $plugin array
 *   The plugin to check.
 *
 * @return boolean
 *   Whether or not the plugin is valid (has no unmet dependencies).
 */
function _key_plugin_is_valid($plugin) {
  if (isset($plugin['dependency errors']) && !empty($plugin['dependency errors'])) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}

/**
 * Helper function to clear key plugin caches.
 */
function _key_clear_plugin_cache($type = NULL) {
  if ($type) {
    cache_clear_all("plugins:key:$type", 'cache');
  }
  else {
    cache_clear_all('plugins:key:', 'cache', TRUE);
  }
}