<?php

/**
 * @file
 * Provides the ability to manage keys, which can be used by other modules.
 */

define('KEY_STATUS_VALID', 1);
define('KEY_STATUS_NOT_VALID', 0);

/**
 * Implements hook_permission().
 */
function key_permission() {
  return array(
    'administer keys' => array(
      'title' => t('Administer keys'),
      'description' => 'Create, edit, and delete keys.',
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 *
 * Tell CTools where to find plugins for this module.
 */
function key_ctools_plugin_directory($module, $plugin) {
  if ($module == 'key' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_ctools_plugin_type().
 *
 * Tell CTools about plugins the module uses.
 */
function key_ctools_plugin_type() {
  $plugins['key_storage_method'] = array(
    'cache' => TRUE,
    'cache table' => 'cache',
    'process' => '_key_plugin_process',
    'defaults' => array(
      'title' => '',
      'description' => '',
      'key get callback' => NULL,
      'key set callback' => NULL,
      'dependency callback' => NULL,
      'dependency errors' => NULL,
      'settings form' => NULL,
      'key form' => NULL,
      'instructions' => NULL,
      'status callback' => NULL,
    ),
  );

  $plugins['key_usage'] = array(
    'cache' => TRUE,
    'cache table' => 'cache',
    'defaults' => array(
      'enable callback' => NULL,
      'disable callback' => NULL,
    ),
  );

  return $plugins;
}

/**
 * Gets information about all key storage methods.
 *
 * @param bool $all
 *   A flag indicating whether to include plugins with unmet dependencies.
 * @param bool $reset
 *   A flag indicating whether to clear the plugin cache. Otherwise, stale
 *   data may be returned if plugin properties have changed.
 *
 * @return array
 *   Information about all key storage methods.
 */
function key_get_storage_methods($all = TRUE, $reset = FALSE) {
  if ($reset) {
    _key_clear_plugin_cache('key_storage_method');
  }

  ctools_include('plugins');
  $methods = ctools_get_plugins('key', 'key_storage_method');

  return $all ? $methods : array_filter($methods, '_key_plugin_is_valid');
}

/**
 * Gets all key storage methods as options, for use in forms.
 *
 * @param bool $all
 *   A flag indicating whether to include plugins with unmet dependencies.
 * @param bool $reset
 *   A flag indicating whether to clear the plugin cache. Otherwise, stale
 *   data may be returned if plugin properties have changed.
 *
 * @return array
 *   An array of storage methods, with names for keys and labels for values.
 */
function key_get_storage_methods_as_options($all = TRUE, $reset = FALSE) {
  $providers = key_get_storage_methods($all, $reset);
  $options = array();

  foreach($providers as $name => $provider) {
    $options[$name] = $provider['title'];
  }

  return $options;
}

/**
 * Gets information about a specific key storage method.
 *
 * @param string $method
 *   The name of the storage method to get.
 * @param bool $reset
 *   A flag indicating whether to clear the plugin cache. Otherwise, stale
 *   data may be returned if plugin properties have changed.
 *
 * @return array
 *   A key storage method.
 */
function key_get_storage_method($method, $reset = FALSE) {
  ctools_include('plugins');
  return ctools_get_plugins('key', 'key_storage_method', $method);
}

/**
 * Gets information about all key configurations.
 *
 * @param bool $reset
 *   A flag to force the configurations to be retrieved from the database.
 *
 * @return array
 *   An array of configurations.
 */
function key_get_configs($reset = FALSE) {
  $configs = &drupal_static(__FUNCTION__);

  if (!isset($configs) || $reset) {
    $configs = db_query("SELECT * FROM {key_config} ORDER BY label ASC")->fetchAllAssoc('name', PDO::FETCH_ASSOC);

    // Unserialize storage_settings field.
    foreach ($configs as $name => $config) {
      if (!empty($config['storage_settings'])) {
        $storage_settings = unserialize($config['storage_settings']);
        $configs[$name]['storage_settings'] = $storage_settings;
      }
    }
  }

  return $configs;
}

/**
 * Gets all key configurations as options, for use in forms.
 *
 * @param bool $reset
 *   A flag to force the configurations to be retrieved from the database.
 *
 * @return array
 *   An array of configurations, with names for keys and labels for values.
 */
function key_get_configs_as_options($reset = FALSE) {
  $options = &drupal_static(__FUNCTION__);

  if (!isset($options) || $reset) {
    $configs = key_get_configs($reset);
    foreach($configs as $name => $config) {
      $options[$name] = $config['label'];
    }
  }

  return $options;
}

/**
 * Gets information about a specific key configuration.
 *
 * @param string $name
 *   The machine name of the configuration to get.
 * @param bool $reset
 *   A flag to force the configuration to be retrieved from the database.
 *
 * @return array
 *   A key configuration.
 */
function key_get_config($name, $reset = FALSE) {
  $configs = &drupal_static(__FUNCTION__);

  if (!isset($configs) || $reset) {
    $configs = key_get_configs($reset);
  }

  if (array_key_exists($name, $configs)) {
    $config = $configs[$name];
  }
  else {
    $config = NULL;
  }

  return $config;
}

/**
 * Save a key configuration.
 *
 * @param array $fields
 *   The fields of the configuration to save.
 * @param bool $messages
 *   TRUE if messages should be displayed.
 */
function key_save_config($fields, $messages = TRUE) {
  // Serialize any field that is an array.
  foreach ($fields as $key => $field) {
    if (is_array($field)) {
      $fields[$key] = serialize($field);
    }
  }

  // If the created field is empty, set it to the request time.
  if (empty($fields['created'])) {
    $fields['created'] = REQUEST_TIME;
  }

  // If the changed field is empty, set it to the request time.
  if (empty($fields['changed'])) {
    $fields['changed'] = REQUEST_TIME;
  }

  // Save the configuration.
  $merge_status = db_merge('key_config')
    ->key(array('name' => $fields['name']))
    ->fields($fields)
    ->execute();

  // Display message and log to watchdog.
  if ($messages) {
    $t_args = array('%label' => $fields['label']);

    switch ($merge_status) {
      case MergeQuery::STATUS_INSERT:
        drupal_set_message(t('The key %label has been added.', $t_args));
        watchdog('encrypt', 'Added key %label.', $t_args, WATCHDOG_NOTICE, l(t('view'), KEY_MENU_PATH . '/list'));
        break;

      case MergeQuery::STATUS_UPDATE:
        drupal_set_message(t('The key %label has been updated.', $t_args));
        watchdog('encrypt', 'Updated key %label.', $t_args, WATCHDOG_NOTICE, l(t('view'), KEY_MENU_PATH . '/list'));
        break;
    }
  }
}

/**
 * Get a key using a key configuration.
 *
 * @param string $config_name
 *   The configuration name of the key to retrieve.
 *
 * @return string
 *   The key.
 */
function key_get_key($config_name) {
  $keys = &drupal_static(__FUNCTION__);

  // If the key already exists, return it.
  if (isset($keys[$config_name])) {
    return $keys[$config_name];
  }

  $config = key_get_config($config_name);
  $storage_method = key_get_storage_method($config['storage_method']);

  // Get the function to retrieve the key.
  $key_function = ctools_plugin_get_function($storage_method, 'key get callback');

  // If there are any settings, use them.
  $storage_settings = isset($config['storage_settings']) ? $config['storage_settings'] : array();

  // Retrieve the key.
  $key = call_user_func($key_function, $storage_settings);

  // Store the key, in case it's needed again.
  $keys[$config_name] = $key;

  return $key;
}

/**
 * Helper function to clear key plugin caches.
 */
function _key_clear_plugin_cache($type = NULL) {
  if ($type) {
    cache_clear_all("plugins:key:$type", 'cache');
  }
  else {
    cache_clear_all('plugins:key:', 'cache', TRUE);
  }
}

/**
 * Helper function to determine if a plugin has unmet dependencies.
 *
 * @param array $plugin
 *   The plugin to check.
 *
 * @return bool
 *   Whether or not the plugin is valid (has no unmet dependencies).
 */
function _key_plugin_is_valid($plugin) {
  if (isset($plugin['dependency errors']) && !empty($plugin['dependency errors'])) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}
