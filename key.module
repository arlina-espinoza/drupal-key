<?php

/**
 * @file
 * Provides the ability to manage keys, which can be used by other modules.
 */

define('KEY_MENU_PATH', 'admin/config/system/keys');

/**
 * Implements hook_permission().
 */
function key_permission() {
  return array(
    'administer keys' => array(
      'title' => t('Administer keys'),
      'description' => 'Create, edit, and delete keys.',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function key_menu() {
  $items = array();

  $items[KEY_MENU_PATH] = array(
    'title' => 'Keys',
    'description' => 'Manage site-wide keys.',
    'page callback' => 'key_configs_list',
    'access arguments' => array('administer keys'),
    'file' => 'includes/key.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items[KEY_MENU_PATH . '/list'] = array(
    'title' => 'List keys',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items[KEY_MENU_PATH . '/add'] = array(
    'title' => 'Add key',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('key_config_form'),
    'access arguments' => array('administer keys'),
    'file' => 'includes/key.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  $items[KEY_MENU_PATH . '/manage/%key_config'] = array(
    'title' => 'Edit key',
    'title callback' => 'key_config_edit_title',
    'title arguments' => array(5),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('key_config_form', 5),
    'access arguments' => array('administer keys'),
    'file' => 'includes/key.admin.inc',
  );
  $items[KEY_MENU_PATH . '/manage/%key_config/delete'] = array(
    'title' => 'Delete key',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('key_config_delete_confirm', 5),
    'access arguments' => array('administer keys'),
    'file' => 'includes/key.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function key_theme() {
  return array(
    'key_configs_list_description' => array(
      'variables' => array(
        'label' => NULL,
        'id' => NULL,
        'description' => NULL,
      ),
      'file' => 'includes/key.admin.inc',
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 *
 * Tell CTools where to find plugins for this module.
 */
function key_ctools_plugin_directory($module, $plugin) {
  if ($module == 'key' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_ctools_plugin_type().
 *
 * Tell CTools about plugins the module uses.
 */
function key_ctools_plugin_type() {
  $plugins['key_type'] = array(
    'cache' => TRUE,
    'cache table' => 'cache',
    'process' => '_key_type_plugin_process',
    'defaults' => array(
      'label' => '',
      'description' => '',
      'group' => 'none',
      'key value' => array(
        'plugin' => 'text_field',
      ),
      'build configuration form' => NULL,
      'validate configuration form' => NULL,
      'submit configuration form' => NULL,
      'build delete form' => NULL,
      'validate delete form' => NULL,
      'submit delete form' => NULL,
      'generate key value' => '_key_default_generate_key_value',
      'validate key value' => NULL,
    ),
  );

  $plugins['key_provider'] = array(
    'cache' => TRUE,
    'cache table' => 'cache',
    'process' => '_key_provider_plugin_process',
    'defaults' => array(
      'label' => '',
      'description' => '',
      'storage method' => '',
      'key value' => array(
        'accepted' => FALSE,
        'required' => FALSE,
        'editable' => FALSE,
      ),
      'build configuration form' => NULL,
      'validate configuration form' => NULL,
      'submit configuration form' => NULL,
      'build delete form' => NULL,
      'validate delete form' => NULL,
      'submit delete form' => NULL,
      'get key value' => NULL,
      'set key value' => NULL,
      'obscure key value' => NULL,
      'dependency callback' => NULL,
      'dependency errors' => NULL,
      'key value form' => NULL,
      'key value obscure' => NULL,
      'allow base64 encoding' => TRUE,
    ),
  );

  $plugins['key_input'] = array(
    'cache' => TRUE,
    'cache table' => 'cache',
    'process' => '_key_type_plugin_process',
    'defaults' => array(
      'label' => '',
      'description' => '',
      'build configuration form' => NULL,
      'validate configuration form' => NULL,
      'submit configuration form' => NULL,
      'build delete form' => NULL,
      'validate delete form' => NULL,
      'submit delete form' => NULL,
      'process submitted key value' => '_key_default_process_submitted_key_value',
      'process existing key value' => '_key_default_process_existing_key_value',
    ),
  );

  return $plugins;
}

/**
 * Implements hook_element_info().
 */
function key_element_info() {
  $type['key_select'] = array(
    '#input' => TRUE,
    '#size' => 0,
    '#multiple' => FALSE,
    '#process' => array(
      '_key_element_expand',
      'form_process_select',
      'ajax_process_form',
    ),
    '#theme' => 'select',
    '#theme_wrappers' => array('form_element'),
    '#options' => array(),
    // Allow filtering of the list of key configurations.
    // See _key_filter_configs().
    '#filters' => array(),
    '#key_description' => TRUE,
  );

  return $type;
}

/**
 * Title callback for the key configuration edit page.
 *
 * @param string $config_name
 *   The machine-readable name of the configuration being edited.
 *
 * @return string
 *   The human-friendly label of the requested configuration.
 */
function key_config_edit_title($config) {
  return t('Edit @name key', array('@name' => $config['label']));
}

/**
 * Menu argument loader: loads a key configuration by id.
 *
 * @param string $id
 *   The machine-readable name of an configuration to load,
 *   where '-' is replaced with '_'.
 *
 * @return array
 *   An array representing an key configuration or FALSE if the
 *   configuration does not exist.
 */
function key_config_load($id) {
  return key_get_config(strtr($id, array('-' => '_')));
}

/**
 * Process function to expand the key element.
 */
function _key_element_expand($element) {
  $element['#empty_option'] = t('Select a key');
  $element['#options'] = key_get_configs_as_options();
  if (!empty($element['#filters'])) {
    $element['#options'] = _key_configs_filter($element['#options'], $element['#filters']);
  }

  // Prefix the default description with a information about keys.
  if ($element['#key_description']) {
    $original_description = (isset($element['#description'])) ? $element['#description'] : '';
    $key_description = t('Choose an available key to use.');
    $key_description .= ' ' . t('If your key is not listed, <a href="@url">create a new key</a>.', array('@url' => '/' . KEY_MENU_PATH));

    $element['#description'] = $key_description . ' ' . $original_description;
  }

  return $element;
}

/**
 * Filter an array of key configurations.
 */
function _key_configs_filter($configs, $filters) {
  $target_configs = array();

  foreach (key_get_configs() as $config) {
    $include = TRUE;

    if (!empty($filters['provider'])) {
      $include &= in_array($config['key_provider'], (array) $filters['provider']);
    }

    if ($include) {
      $target_configs[$config['id']] = TRUE;
    }
  }
  $configs = array_intersect_key($configs, $target_configs);

  return $configs;
}


/**
 * Gets information about all key plugins of the requested type.
 *
 * @param string $type
 *   The type of plugin.
 * @param bool $all
 *   A flag indicating whether to include plugins with unmet dependencies.
 * @param bool $reset
 *   A flag indicating whether to clear the plugin cache. Otherwise, stale
 *   data may be returned if plugin properties have changed.
 *
 * @return array
 *   Information about all key plugins of the requested type.
 */
function key_get_plugins($type, $all = TRUE, $reset = FALSE) {
  if (!in_array($type, _key_get_plugin_types())) {
    return array();
  }

  if ($reset) {
    _key_clear_plugin_cache($type);
  }

  ctools_include('plugins');
  $plugins = ctools_get_plugins('key', $type);

  return $all ? $plugins : array_filter($plugins, '_key_plugin_is_valid');
}

/**
 * Gets all key plugins of the requested type as options, for use in forms.
 *
 * @param string $type
 *   The type of plugin.
 * @param bool $all
 *   A flag indicating whether to include plugins with unmet dependencies.
 * @param bool $reset
 *   A flag indicating whether to clear the plugin cache. Otherwise, stale
 *   data may be returned if plugin properties have changed.
 *
 * @return array
 *   An array of key plugins, with ids for keys and labels for values.
 */
function key_get_plugins_as_options($type, $all = TRUE, $reset = FALSE) {
  $plugins = key_get_plugins($type, $all, $reset);
  $options = array();

  foreach($plugins as $id => $plugin) {
    $options[$id] = $plugin['label'];
  }

  return $options;
}

/**
 * Gets information about a specific key plugin of a requested type.
 *
 * @param string $type
 *   The type of plugin.
 * @param string $provider
 *   The id of the key provider to get.
 * @param bool $reset
 *   A flag indicating whether to clear the plugin cache. Otherwise, stale
 *   data may be returned if plugin properties have changed.
 *
 * @return array
 *   Information about the key plugin.
 */
function key_get_plugin($type, $provider, $reset = FALSE) {
  if (!in_array($type, _key_get_plugin_types())) {
    return array();
  }

  ctools_include('plugins');
  return ctools_get_plugins('key', $type, $provider);
}

/**
 * Gets information about all key configurations.
 *
 * @param bool $reset
 *   A flag to force the configurations to be retrieved from the database.
 *
 * @return array
 *   An array of configurations.
 */
function key_get_configs($reset = FALSE) {
  $configs = &drupal_static(__FUNCTION__);

  if (!isset($configs) || $reset) {
    $configs = db_query("SELECT * FROM {key_config} ORDER BY label ASC")->fetchAllAssoc('id', PDO::FETCH_ASSOC);

    // Unserialize provider_settings field.
    foreach ($configs as $id => $config) {
      if (!empty($config['key_provider_settings'])) {
        $provider_settings = unserialize($config['key_provider_settings']);
        $configs[$id]['key_provider_settings'] = $provider_settings;
      }
    }
  }

  return $configs;
}

/**
 * Gets all key configurations as options, for use in forms.
 *
 * @param bool $reset
 *   A flag to force the configurations to be retrieved from the database.
 *
 * @return array
 *   An array of configurations, with ids for keys and labels for values.
 */
function key_get_configs_as_options($reset = FALSE) {
  $options = &drupal_static(__FUNCTION__);

  if (!isset($options) || $reset) {
    $configs = key_get_configs($reset);
    $options = array();
    foreach($configs as $id => $config) {
      $options[$id] = $config['label'];
    }
  }

  return $options;
}

/**
 * Gets information about a specific key configuration.
 *
 * @param string $id
 *   The machine name of the configuration to get.
 * @param bool $reset
 *   A flag to force the configuration to be retrieved from the database.
 *
 * @return array
 *   A key configuration.
 */
function key_get_config($id, $reset = FALSE) {
  $configs = &drupal_static(__FUNCTION__);

  if (!isset($configs) || $reset) {
    $configs = key_get_configs($reset);
  }

  if (array_key_exists($id, $configs)) {
    $config = $configs[$id];
  }
  else {
    $config = NULL;
  }

  return $config;
}

/**
 * Save a key configuration.
 *
 * @param array $fields
 *   The fields of the configuration to save.
 * @param bool $messages
 *   TRUE if messages should be displayed.
 */
function key_save_config($fields, $messages = TRUE) {
  // Load the key provider.
  $provider = key_get_plugin('key_provider', $fields['key_provider']);

  // Serialize any field that is an array.
  foreach ($fields as $index => $field) {
    if (is_array($field)) {
      $fields[$index] = serialize($field);
    }
  }

  // If the created field is empty, set it to the request time.
  if (empty($fields['created'])) {
    $fields['created'] = REQUEST_TIME;
  }

  // If the changed field is empty, set it to the request time.
  if (empty($fields['changed'])) {
    $fields['changed'] = REQUEST_TIME;
  }

  // Save the configuration.
  $merge_status = db_merge('key_config')
    ->key(array('id' => $fields['id']))
    ->fields($fields)
    ->execute();

  // Display message and log to watchdog.
  if ($messages) {
    $t_args = array('%label' => $fields['label']);

    switch ($merge_status) {
      case MergeQuery::STATUS_INSERT:
        drupal_set_message(t('The key %label has been added.', $t_args));
        watchdog('key', 'Added key %label.', $t_args, WATCHDOG_NOTICE, l(t('view'), KEY_MENU_PATH . '/list'));
        break;

      case MergeQuery::STATUS_UPDATE:
        drupal_set_message(t('The key %label has been updated.', $t_args));
        watchdog('key', 'Updated key %label.', $t_args, WATCHDOG_NOTICE, l(t('view'), KEY_MENU_PATH . '/list'));
        break;
    }
  }

  // Load the configuration to make sure it was saved.
  $key_config = key_get_config($fields['id'], TRUE);
  if (empty($key_config)) {
    return NULL;
  }

  // Return the saved configuration.
  return $key_config;
}

/**
 * Delete a key configuration.
 *
 * @param string $id
 *   The ID of the configuration to delete.
 * @param bool $messages
 *   TRUE if messages should be displayed.
 *
 * @return bool
 *   TRUE if successful, FALSE if not.
 */
function key_delete_config($id, $messages = TRUE) {
  // Load the configuration.
  $config = key_get_config($id);

  // If the configuration could not be loaded.
  if (!$config) {
    // Display message and log to watchdog.
    if ($messages) {
      drupal_set_message(t('The key was not deleted because it could not be found.'));
      watchdog('key', 'The key was not deleted because it could not be found.', array(), WATCHDOG_NOTICE, l(t('view'), KEY_MENU_PATH . '/list'));
    }
    return FALSE;
  }

  // Load the key provider plugin.
  $provider = key_get_plugin('key_provider', $config['key_provider']);

  if ($delete_callback = ctools_plugin_get_function($provider, 'submit delete form')) {
    call_user_func($delete_callback, $config);
  }

  db_delete('key_config')
    ->condition('id', $id)
    ->execute();

  if ($messages) {
    $t_args = array('%label' => $config['label']);
    drupal_set_message(t('The key %label has been deleted.', $t_args));
    watchdog('key', 'Deleted key %label.', $t_args, WATCHDOG_NOTICE);
  }

  // Try to load the configuration again.
  $config = key_get_config($id);

  return ($config) ? FALSE : TRUE;
}

/**
 * Get a key using a key configuration.
 *
 * @param string $config_id
 *   The configuration id of the key to retrieve.
 *
 * @return string
 *   The key.
 */
function key_get_key($config_id) {
  $keys = &drupal_static(__FUNCTION__);

  // If the key already exists, return it.
  if (isset($keys[$config_id])) {
    return $keys[$config_id];
  }

  $config = key_get_config($config_id);

  // If the configuration doesn't exist, return NULL.
  if (!isset($config)) {
    return NULL;
  }

  $provider = key_get_plugin('key_provider', $config['key_provider']);

  // Get the function to retrieve the key.
  $key_function = ctools_plugin_get_function($provider, 'get key value');

  // Retrieve the key.
  $key = call_user_func($key_function, $config);

  // Store the key, in case it's needed again.
  $keys[$config_id] = $key;

  return $key;
}

/**
 * Helper function to clear key plugin caches.
 */
function _key_clear_plugin_cache($type = NULL) {
  if ($type) {
    cache_clear_all("plugins:key:$type", 'cache');
  }
  else {
    cache_clear_all('plugins:key:', 'cache', TRUE);
  }
}

/**
 * Callback function to process key provider plugins.
 */
function _key_provider_plugin_process(&$plugin, $info) {
  // Check dependencies and attach any errors to the plugin.
  if ($dependency_function = ctools_plugin_get_function($plugin, 'dependency callback')) {
    $plugin['dependency errors'] = call_user_func($dependency_function);
  }
}

/**
 * Determine if a key provider plugin is valid.
 *
 * @param array $plugin
 *   The plugin to check.
 *
 * @return bool
 *   Whether or not the plugin is valid.
 */
function _key_plugin_is_valid($plugin) {
  if (empty($plugin['dependency errors'])) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Return a list of plugin types used with keys.
 *
 * @return array
 *   The list of plugin types.
 */
function _key_get_plugin_types() {
  return array('key_type', 'key_provider', 'key_input');
}

/**
 * Implements hook_features_api().
 *
 * Define the components that we want to make exportable, in this case
 * key configurations.
 */
function key_features_api() {
  return array(
    'key_config' => array(
      'name' => 'Keys',
      'file' => drupal_get_path('module', 'key') . '/includes/key_config.features.inc',
      'default_hook' => 'key_default_configs',
      'feature_source' => TRUE,
    ),
  );
}
